<%- include('header'); -%> <%- include('navbar'); -%>

<section class="section">
  <div class="container">
    <% if(locals.err) { %>
    <article class="message is-danger is-small">
      <div class="message-body"><%= err %></div>
    </article>
    <% } %> <% if (locals.newClientConfig){ %>
    <div class="columns">
      <div class="column">
        <article class="message is-primary">
          <div class="message-body">Client successfully created, make sure to take config file.</div>
        </article>
      </div>
    </div>
    <% } %>
    <div class="columns">
      <div class="column">
        <form class="box" action="" method="POST">
          <div class="field">
            <label class="label">Description</label>
            <div class="control">
              <input class="input" name="desc" required type="text" placeholder="John Doe's Phone" />
            </div>
          </div>
          <div class="field">
            <label id="enable-address-edit" class="label">Address</label>
            <div class="control">
              <input class="input" name="address" readonly required type="text" value="<%= nextIpAddress %>" />
            </div>
          </div>

          <div class="field">
            <label class="label">DNS</label>
            <div class="select">
              <select name="dns">
                <option value="8.8.8.8, 8.8.4.4">Google</option>
                <option value="1.1.1.1, 1.0.0.1">Cloudflare</option>
                <option value="9.9.9.9, 149.112.112.112">Quad9</option>
                <option value="208.67.222.222, 208.67.220.220">OpenDNS</option>
                <option value="94.140.14.14, 94.140.15.15">AdGuard</option>
              </select>
            </div>
          </div>

          <div class="field">
            <label class="label">Endpoint</label>
            <div class="control">
              <input class="input" name="endpoint" required placeholder="e.g. domain.com" type="text" />
            </div>
          </div>

          <div class="field">
            <div class="control">
              <button class="button is-primary">Submit</button>
            </div>
          </div>
        </form>
      </div>

      <div class="column">
        <form class="box" action="" method="POST">
          <div class="field">
            <label class="label">Result</label>
            <div class="control">
              <textarea class="textarea" rows="11" id="result"><%= locals.newClientConfig %></textarea>
            </div>
          </div>

          <p id="config-action" class="buttons">
            <button id="config-save" class="button">
              <span class="material-icons">save_alt</span>
            </button>
            <button id="config-qrcode" class="button">
              <span class="material-icons">qr_code_2</span>
            </button>
            <button id="config-copy" class="button">
              <span class="material-icons">content_copy</span>
            </button>
          </p>
        </form>
      </div>
    </div>
  </div>
</section>
<div id="modal-qrcode" class="modal">
  <div class="modal-background"></div>
  <div class="modal-content">
    <p class="image is-square">
      <img src="/images/loading.gif" alt="" />
    </p>
  </div>
  <button class="modal-close is-large" aria-label="close"></button>
</div>

<script>
  let actionButtons = document.querySelectorAll("#config-action button");
  let resultBox = document.querySelector("#result");

  result.oninput = () => {
    toggleActionButtons(actionButtons, resultBox);
  };

  // run on document ready
  (function () {
    toggleActionButtons(actionButtons, resultBox);
  })();

  document.querySelector("#config-save").addEventListener("click", function (e) {
    e.preventDefault();
    let config = resultBox.value;
    downloadOnClick("VPN.conf", config);
  });

  document.querySelector("#config-qrcode").addEventListener("click", function (e) {
    e.preventDefault();

    let config = resultBox.value;
    let configEncoded = encodeURIComponent(config);

    var url = "https://chart.googleapis.com/chart?cht=qr&chs=500x500&chl=" + configEncoded + "&choe=UTF-8";

    let modal = document.querySelector("#modal-qrcode");
    let modalImage = modal.querySelector("img");

    modalImage.src = url;

    modal.classList.add("is-active", "is-clipped");
  });

  document.querySelector("#config-copy").addEventListener("click", function (e) {
    e.preventDefault();

    resultBox.select();
    document.execCommand("copy");
    resultBox.blur();
    alert("Config copied to clipboard.");
  });

  document.querySelector(".modal-close").addEventListener("click", function (e) {
    this.closest("div.modal").classList.remove("is-active", "is-clipped");
    document.querySelector("#modal-qrcode img").src = "/images/loading.gif";
  });

  document.querySelector("#enable-address-edit").addEventListener("dblclick", (e) => {
    let inputAddress = document.querySelector("input[name=address]");
    inputAddress.removeAttribute("readonly");
  });

  function downloadOnClick(filename, content) {
    let config = content;
    let contentAsBlob = new Blob([content], {
      type: "text/plain",
    });

    var downloadLink = document.createElement("a");
    downloadLink.download = filename;
    downloadLink.innerHTML = "Download File";
    if (window.webkitURL != null) {
      // Chrome allows the link to be clicked without actually adding it to the DOM.
      downloadLink.href = window.webkitURL.createObjectURL(contentAsBlob);
    } else {
      // Firefox requires the link to be added to the DOM before it can be clicked.
      downloadLink.href = window.URL.createObjectURL(contentAsBlob);
      downloadLink.onclick = destroyClickedElement;
      downloadLink.style.display = "none";
      document.body.appendChild(downloadLink);
    }

    downloadLink.click();
  }

  function toggleActionButtons(actionButtons, resultBox) {
    let actionButtonsDisabled = actionButtons[0].getAttribute("disabled") === "";
    let validConfig = resultBox.value.includes("[Interface]") && resultBox.value.includes("[Peer]");

    if (validConfig && actionButtonsDisabled) {
      actionButtons.forEach((btn) => btn.removeAttribute("disabled"));
    }
    if (!validConfig && !actionButtonsDisabled) {
      actionButtons.forEach((btn) => btn.setAttribute("disabled", ""));
    }
  }
</script>

<%- include('footer'); -%>
